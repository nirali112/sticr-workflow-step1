name: Running Action- tidy_hobo_sticr
on:
  workflow_dispatch:
    inputs:
      PAYLOAD:
        description: 'Payload'
        required: false
jobs:
  run_docker_image:
    runs-on: ubuntu-latest
    container: ghcr.io/faasr/github-actions-tidyverse
    env:
      MY_GITHUB_ACCOUNT_TOKEN: ${{ secrets.MY_GITHUB_ACCOUNT_TOKEN }}
      MY_MINIO_BUCKET_ACCESS_KEY: ${{ secrets.MY_MINIO_BUCKET_ACCESS_KEY }}
      MY_MINIO_BUCKET_SECRET_KEY: ${{ secrets.MY_MINIO_BUCKET_SECRET_KEY }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      PAYLOAD: |
        {
          "FunctionList": ["faasr_tidy_hobo_sticr"],
          "FunctionInvoke": "faasr_tidy_hobo_sticr",
          "FunctionGitHubRepo": "nirali112/sticr-functions",
          "FunctionGitHubBranch": "main",
          "FunctionGitHubPath": ".",
          "FunctionGitHubPackage": ["devtools", "remotes"],
          "FunctionCRANPackage": ["dplyr", "readr"],
          "ComputeServers": {
            "my-github-actions": {
              "FaaSType": "GitHubActions",
              "ActionTimeout": 1000
            }
          },
          "DataStores": {
            "my-minio": {
              "FaaSType": "minio",
              "Endpoint": "play.min.io",
              "AccessKey": "${{ secrets.MY_MINIO_BUCKET_ACCESS_KEY }}",
              "SecretKey": "${{ secrets.MY_MINIO_BUCKET_SECRET_KEY }}",
              "Bucket": "faasr"
            }
          }
        }
    steps:
    - name: Test R JSON Processing
      run: |
        cd /action
        cat > test_json_processing.R << 'EOF'
        cat("=== R JSON PROCESSING DEBUG ===\n")
        
        # Test if R can read the PAYLOAD environment variable
        payload_raw <- Sys.getenv("PAYLOAD")
        cat("PAYLOAD from R Sys.getenv():\n")
        cat("Length:", nchar(payload_raw), "\n")
        cat("First 100 chars:", substr(payload_raw, 1, 100), "\n")
        cat("Last 100 chars:", substr(payload_raw, nchar(payload_raw)-99, nchar(payload_raw)), "\n")
        
        # Test if there are any problematic characters
        cat("Contains newlines:", grepl("\n", payload_raw), "\n")
        cat("Contains carriage returns:", grepl("\r", payload_raw), "\n")
        
        # Try different JSON parsing approaches
        cat("\n=== JSON PARSING TESTS ===\n")
        
        # Test 1: jsonlite::fromJSON
        tryCatch({
          library(jsonlite)
          parsed_jsonlite <- jsonlite::fromJSON(payload_raw)
          cat("✓ jsonlite::fromJSON - SUCCESS\n")
        }, error = function(e) {
          cat("✗ jsonlite::fromJSON - FAILED:", e$message, "\n")
        })
        
        cat("=== R DEBUG COMPLETE ===\n")
        EOF
        
        Rscript test_json_processing.R
        
    - name: run Rscript
      run: |
        cd /action
        Rscript faasr_start_invoke_github-actions.R
